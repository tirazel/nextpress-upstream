{#
/**
 * @file
 * Theme to implement a Hero Unit Paragraph
 *
 * Background settings are set inline CSS
 * All other styling done through classes
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    paragraph.field_text_align.value,
    paragraph.field_text_color.value
  ]
%}

{# set style for backgroung settings #}
{% if paragraph.field_solid_colors.value is defined %}
  {% set bgValue = "background: var(#{paragraph.field_solid_colors.value});" %}
{% else %}
  {% set bgValue = "background-color: inherit;" %}
{% endif %}

{# A background image will be used over a solid color #}
{% if paragraph.field_background_image.entity.field_media_image.entity is defined %}
  {% set bgValue = "background-image:url(#{ file_url(paragraph.field_background_image.entity.field_media_image.entity.fileuri) });background-repeat:no-repeat;background-position:center;background-size:cover;" %}
{% endif %}

{# set classes for the size of the component #}
{% if paragraph.field_size.value is same as("0") %}
  {% set size = "size-large" %}
{% elseif paragraph.field_size.value is same as("1") %}
  {% set size = "size-medium" %}
{% else %}
  {% set size = "size-small" %}
{% endif %}

{% block paragraph %}
  <div{{ attributes.addClass(classes).setAttribute("style","#{bgValue}").addClass(size) }}>
    {% block content %}
      {% set linkColor = paragraph.field_link_color.value %}
      {# Dont let twig render the links #}
      <div class="container">
        {{ content|without('field_links') }}
        {# Render links here #}
        {# <p> {{ dump(paragraph.field_links.value) }} </p> #}
        {% for item in paragraph.field_links.value %}
          <a href="{{ item.uri }}" class="button {{ linkColor }}" > {{ item.title }} </a>
        {% endfor %}
      </div>
    {% endblock %}
  </div>
{% endblock paragraph %}
